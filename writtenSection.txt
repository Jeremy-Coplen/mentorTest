Answer each question in a written format

1. What does semantic HTML mean? semantic HTML are elements that describe its meaning to the browser and the developer. Some examples of non semantic
elements are div, span and section. Some examples of sementic elements are form, input, p, h1, table. The best practice for semantic HTML is making
sure that you use semantic elements properly and not just using because you like the default styling that they have so you should only use li
if you have a list you should only use h1 if its a heading if its not a heading you should use p for the text. Another thing that you can do but 
I haven't done myself is create custom semantic elements some pros of using custom semantic elements are that it can make that element make more sense to
the browser and developer and you can create your own methods on those semantic elements an example of methods that are built in to HTML is onClick.
Some cons are that if you aren't careful the custom elements can confuse the browser and deveolpers instead of making things more clear.

2. What is the box model? the box model lets you create borders around elements and lets you create space between the content and its 
containter as well as space between other elements. The content is the text or image or "content" in the element and thats in the center,
the padding allows you to create space between the content and its container, the border allows to create a visible line around the element
which the standard is 1px solid and a color which is usually black, the margin is what lets you create space between other elements lets say
i have two divs next to each other and dont want them smushed together i would give those divs a margin-right of however much space i want
and it would push the elements to the right of it by the amount specified

3. What is the difference between IDs and Classes? they are both used to apply styles to certain elements
it is best practice to use an id on only one element if you need to apply styles to more than one element use a class

4. What is z-index (CSS property) useful for? you use the z index to set the load order of styles so to say if you have overlapping elements and
you want a specific element on top or in the middle or bottom you would use the z index to set which one gets set where the higher the index the closer
it will be towards the top and the one with the highest number will be on top the one with the lowest number will be on bottom

5. Summarize what the keyword 'this' is used for? the this keyword helps set the context of variables and functions i 
commonly use them for javascript classes and react components it helps set the context to that specific instance of the code
so on a class you have this.color = red and you make a new instance of that class and change the instances this.color to blue only
that color on that instance of that class will change and not that class itself on react we use this.state.variable is referring to
that specific instance so multiple can be running that app and change this.state.variable independently

6. What is a callback? What are common uses for callbacks in JavaScript? a callback is a function passed in as an argument to another function
for that function to call on later common uses for callbacks are things like .filter and .map they have callback functions in them that help you modify arrays

7. What is a closure and why is it useful? a closure is a function that returns a functionand its useful for if you need acess to that begining function later 
when you make a closure it makes a snapshot of that entire function so say you have an axios call in that inner function that relied on the outer function
well because that snapshot was created it can access the information in the outer function if we didnt make it a closure the inner function wouldnt have access
to the information in the outer function and the code would not work how we expected it to

8. How does a prototype work? prototypes are a property on functions they are object instances that will become the prototype for all objects created using that function.
So with that said objects also have a prototype but they dont work quite the same as function prototypes i like to think of prototypes as a shared shelf and you can add
properties to the that shelf and all of the objects created from those functions can access those properties but they dont make new copies of that shelf 
like the non prototype properties on that function. So the objects you create from classes/constructor functions have their own non shared shelf that they copied
the properties off the class/constructor function and put on that non shared shelf and then the have access to the shared shelf but dont copy/ make their own versions of
that shared shelf which is that prototypes object

9. Describe what a component-based framework/library is? a component based framework/library is the idea of splitting up your code into smaller and potentially resuable parts 
and all your components come together to make the entire app

10. What is the component lifecycle in React? before the component mounts, the component has mounted, before the component updates, after the component updates, 
and the component has unmounted there are also lifecycle methods you can use to run code at points in the component lifecycle i mostly use componentDidMount for
when the component mounts and componentDidUpdate for when the component updated so i can acess previous props and current props

11. What is REST? (not just a description of the acronym) REST is using http as it was originally seen getting informations should use get reqruests
put, post, and delete should be used for updating, creating and deleting respectively and you interact with api using the url an example would be
https://example.com/item/89 and that would go make an https request for item 89 

12. Name three common ways of getting data from a request (in Express.JS): there is req.body which i typically use with put and post reqruests,
there is req.query which i typically use with get requests and there is req.params which i typically use with put and delete requests



-- =====================
create table users (
id serial,
name varchar(255),
email varchar(255)
)
-- =====================

13. Given the Schema above, write the following four basic CRUD db queries using postgres syntax

-Get all users: select * from users

-Create a new user with the name of 'your name' and an email of 'fake@fake.com': insert into users (name, email) 
values('Jeremy Coplen', 'fake@fake.com')

-Update the newly created user's name to 'Bobby Boy': update users
set name = 'Bobby Boy'
where id = $1 ($1 referes to the users so that you dont update everyones name to Bobby Boy)

-Delete the newly updated user: delete from users
where id = $1 ($1 refers to the users id so that you dont delete everyone in the db)
